package com.google.android.gms.potokens.utils;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.os.Build;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;

import com.google.android.gms.droidguard.DroidGuard;
import com.google.android.gms.droidguard.internal.DroidGuardResultsRequest;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.Tasks;
import com.google.android.mg.proto.CipherKey;
import com.google.android.mg.proto.GetPoIntegrityTokenRequest;
import com.google.android.mg.proto.GetPoIntegrityTokenResponse;
import com.google.android.mg.proto.Key;
import com.google.android.mg.proto.KeyData;
import com.google.android.mg.proto.KeySet;
import com.google.android.mg.proto.POTokenInfo;
import com.google.android.mg.proto.POTokenResult;
import com.google.android.mg.proto.POTokenResultWrap;
import com.google.protobuf.ByteString;
import com.google.protobuf.InvalidProtocolBufferException;

import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class PoTokenHelper {
    public KeySet buildKeySet() {
        KeySet.Builder builder = KeySet.newBuilder();
        Key.Builder keyBuilder = Key.newBuilder();
        SecureRandom secureRandom = new SecureRandom();
        byte[] initKey = new byte[16];
        secureRandom.nextBytes(initKey);
        int keyId = Math.abs(new Random().nextInt());
        CipherKey cipherKey = CipherKey.newBuilder().setValue(ByteString.copyFrom(initKey)).build();
        KeyData keyData = KeyData.newBuilder()
                .setTypeUrl("type.googleapis.com/google.crypto.tink.AesGcmKey")
                .setKeyMaterialType(1)
                .setValue(cipherKey).build();
        keyBuilder.setData(keyData);
        keyBuilder.setKeyId(keyId);
        keyBuilder.setStatus(1);
        keyBuilder.setOutputPrefixType(1);
        builder.addKeyList(keyBuilder);
        builder.setPrimaryKeyId(keyId);
        return builder.build();
    }

    public byte[] concatCipherIdentifier(int keyId, byte[] data) {
        byte[] output = new byte[5 + data.length];
        output[0] = 1;
        byte[] identifier = ByteBuffer.allocate(5).put((byte) 1).putInt(keyId).array();
        System.arraycopy(identifier, 0, output, 0, identifier.length);
        System.arraycopy(data, 0, output, identifier.length, data.length);
        return output;
    }

    public byte[] aes_encrypt(byte[] key, byte[] iv, byte[] data, byte[] aad) {
        try {
            byte[] output = new byte[data.length + 28];

            System.arraycopy(iv, 0, output, 0, 12);
            SecretKeySpec keySpec = new SecretKeySpec(key, "AES");

            Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");

            cipher.init(Cipher.ENCRYPT_MODE, keySpec, new IvParameterSpec(iv));
            if (null != aad && aad.length != 0) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                    cipher.updateAAD(aad);
                }
            }
            cipher.doFinal(data, 0, data.length, output, 12);
            return output;
        } catch (Throwable e) {
            e.printStackTrace();
        }

        return new byte[0];
    }

    public String getDroidguardResult(Context context, String flow, DroidGuardResultsRequest request, Map<String, String> map) {
        try {
            Task<String> resultTask = DroidGuard.getClient(context).getResults(flow, map, request);
            return Tasks.await(resultTask, 15, TimeUnit.SECONDS);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        return null;
    }

    public GetPoIntegrityTokenResponse getPoIntegrityToken(Context ctx, KeySet keySet) {
        try {
            DroidGuardResultsRequest request = new DroidGuardResultsRequest();
            request.setTimeoutMillis(180000);
            request.setOpenHandles(2);
            request.setClientVersion(220221045);
            Logutils.errorMsg(HexDump.toHexString(keySet.toByteArray()));
            request.bundle.putByteArray("po-fast-key", keySet.toByteArray());
            ArrayList<String> tmpList = new ArrayList<>();
            tmpList.add("po-fast-key");
            request.bundle.putStringArrayList("extraKeysRetainedInFallback", tmpList);


            SecureRandom secureRandom = new SecureRandom();
            byte[] randKeyBuf = new byte[0x20];
            secureRandom.nextBytes(randKeyBuf);
            String randKey = Base64.encodeToString(randKeyBuf, Base64.NO_WRAP);

            Map<String, String> map = new HashMap<String, String>();
            map.put("b", randKey);

            String droidguardRetData = getDroidguardResult(ctx, "po-token-fast", request, map);
//            droidguardRetData = "";
            GetPoIntegrityTokenRequest getPoIntegrityTokenRequest = null;
            GetPoIntegrityTokenRequest.Builder getPoIntegrityTokenRequestBuilder = GetPoIntegrityTokenRequest.newBuilder();
            getPoIntegrityTokenRequestBuilder.setDgRandKey(ByteString.copyFrom(randKeyBuf));
            getPoIntegrityTokenRequestBuilder.setDgResult(ByteString.copyFrom(droidguardRetData.getBytes("UTF-8")));
            getPoIntegrityTokenRequestBuilder.setMode(1);
            getPoIntegrityTokenRequest = getPoIntegrityTokenRequestBuilder.build();
            String strurl = "https://deviceintegritytokens-pa.googleapis.com/v1/getPoIntegrityToken?alt=proto&key=AIzaSyBtL0AK6Hzgr69rQyeyhi-V1lmtsPGZd1M";
            String deviceName = android.os.Build.DEVICE;
            String buildVersion = android.os.Build.ID;
            byte[] httpResult = HttpPoster.httpPostForGmsTest(strurl, getPoIntegrityTokenRequest.toByteArray(), "GmsCore/220221045 (" + deviceName + " " + buildVersion + "); gzip");
//            byte[] httpResult = HttpPoster.httpPostForGmsTest(strurl, getPoIntegrityTokenRequest.toByteArray(), "GmsCore/220221045 (munch SKQ1.211006.001); gzip");
            if (httpResult == null) {
                Logutils.errorMsg("this Http is NUll ");
            }
            return GetPoIntegrityTokenResponse.parseFrom(httpResult);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        return null;
    }

    public byte[] calc_po_token(Context ctx, String packageName, byte[] input_data) {
        KeySet keySet = null;
        SpUtil instace = SpUtil.getInstace(ctx);
        String d_cs1 = instace.getString("d_cs1", "");
        String d_cs2 = instace.getString("d_cs2", "");
        String ks = instace.getString("ks", "");
        GetPoIntegrityTokenResponse response = null;

        if (TextUtils.isEmpty(d_cs1) || TextUtils.isEmpty(d_cs2) || TextUtils.isEmpty(ks)) {
            keySet = buildKeySet();
            response = new PoTokenHelper().getPoIntegrityToken(ctx, keySet);
            d_cs1 = Base64.encodeToString(response.getK1().toByteArray(), Base64.DEFAULT);
            d_cs2 = Base64.encodeToString(response.getK2().toByteArray(), Base64.DEFAULT);
            ks = Base64.encodeToString(keySet.toByteArray(), Base64.DEFAULT);
            instace.save("d_cs1", d_cs1);
            instace.save("d_cs2", d_cs2);
            instace.save("ks", ks);
            instace.save("d_cs3", "" + new Date().getTime());
        } else if (!TextUtils.isEmpty(ks)) {
            byte[] result = Base64.decode(ks, Base64.DEFAULT);
            try {
                keySet = KeySet.parseFrom(result);
            } catch (InvalidProtocolBufferException e) {
                e.printStackTrace();
            }
        }
        Log.e("dao", "d_cs1___>>" + d_cs1);
        Log.e("dao", "d_cs2___>>" + d_cs2);
        POTokenInfo.Builder poTokenInfoBuilder = POTokenInfo.newBuilder();
        poTokenInfoBuilder.setInputData(ByteString.copyFrom(input_data));
        poTokenInfoBuilder.setPkgName(packageName);
        poTokenInfoBuilder.setPkgSignSha256(ByteString.copyFrom(getPackageSignatures(ctx, packageName)));

        byte[] decode_dcs1 = Base64.decode(d_cs1, Base64.DEFAULT);
        byte[] decode_dcs2 = Base64.decode(d_cs2, Base64.DEFAULT);


        ByteString byteString = ByteString.copyFrom(decode_dcs1);
        ByteString byteString2 = ByteString.copyFrom(decode_dcs2);
        poTokenInfoBuilder.setPITokenK1(byteString);


        byte[] data = poTokenInfoBuilder.build().toByteArray();
        Key keyObj = keySet.getKeyList(0);
        int keyId = keyObj.getKeyId();
        byte[] key = keyObj.getData().getValue().getValue().toByteArray();
        byte[] iv = new byte[12];
        SecureRandom secureRandom = new SecureRandom();
        secureRandom.nextBytes(iv);

        data = aes_encrypt(key, iv, data, null);
        data = concatCipherIdentifier(keyId, data);
        POTokenResult.Builder resultBuilder = POTokenResult.newBuilder();
        resultBuilder.setEncryptData(ByteString.copyFrom(data));
        resultBuilder.setPITokenK2(byteString2);

        return POTokenResultWrap.newBuilder().setData(resultBuilder.build()).build().toByteArray();
    }


    public static byte[] getPackageSignatures(Context context, String packageName) {
        try {
            PackageInfo info = context.getPackageManager().getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
            for (Signature signature : info.signatures) {
                MessageDigest md = MessageDigest.getInstance("SHA-256");
                md.update(signature.toByteArray());
                byte[] digest = md.digest();
                Log.d("SHA-256", String.valueOf(digest));
                return digest;

            }
        } catch (PackageManager.NameNotFoundException | NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }

}
